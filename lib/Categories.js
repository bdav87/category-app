const csv = require('fast-csv');
const fs = require('fs');

let date = new Date().toDateString().split(' ').join('');
let filename = `category-export-${date}.csv`;
let csvStream = csv.createWriteStream({headers: true});
let writableStream = fs.createWriteStream(filename);
csvStream.pipe(writableStream); 

class Categories {
    constructor(bcAPI) {
        this.bcAPI = bcAPI;
    }
    createSample() {
        let category = {
            parent_id: 0,
            name: `Sample Category ${Math.round(Math.random() * 1000000)}`,
            description: 'A sample category generated by the app',
        };
        return bcAPI.post('/catalog/categories', category)
    }
    export(path) {
        return this.bcAPI.get(`/catalog/categories${path}`)
            .then(categories => {
                this.streamToCSV(categories.data, categories.meta.pagination);
            })
            .catch(err => res.send(`Export error: ${err}.}`));
    }
    streamToCSV(categories, meta) {
        const category_list = categories.map(category => Object.assign({}, category));
        const {current_page, total_pages} = meta;
        this.determinePageForCSV(category_list, current_page, total_pages);
    }
    determinePageForCSV(current_categories, current_page, total_pages) {
        if (current_page < total_pages) {
            current_categories.forEach(writeToCSV);
        }
        if (current_page == total_pages) {
            current_categories.forEach(writeAndPublishCSV);
        }
    }
    writeToCSV(el, i, arr) {
        if (i == arr.length - 1) {
            csvStream.write(formatExportContent(el));
            const path = meta.links.next;
            this.export(bc, path);
        } else {
            csvStream.write(formatExportContent(el));
        }
    }
    writeAndPublishCSV(el, i, arr) {
        if (i == arr.length - 1) {
            csvStream.write(formatExportContent(el));
            sendCSV();
        } else {
            csvStream.write(formatExportContent(el));
        }
    }
    formatExportContent(category) {
        return {
            'Category ID': parseInt(category['id']),
            'Parent ID': parseInt(category['parent_id']),
            'Category Name': category['name'],
            'Category Description': category['description'],
            'Sort Order': category['sort_order'],
            'Page Title': category['page_title'],
            'Meta Keywords': category['meta_keywords'],
            'Meta Description': category['meta_description'],
            'Category Image URL': category['image_url'],
            'Category Visible': BoolString.ToYesNo(category['is_visible']),
            'Search Keywords': category['search_keywords'],
            'Default Product Sort': category['default_product_sort'],
            'Category URL': category['custom_url']['url'],
            'Custom URL': BoolString.ToYesNo(category['custom_url']['is_customized']),
        };
    }
    sendCSV() {
        csvStream.end();
            writableStream.on('finish', function() {
                console.log('Done with CSV');
                res.download(filename, (err) => {
                    if (err) {
                        console.log(`csv send err: ${err}`);
                    }
                    else {
                        fs.unlink(filename, (err) => {
                            if (err) {
                                throw err;
                            }
                            console.log(`${filename} removed after download`);
                        });
                    }
                });
            });
    }

}

module.exports = Categories;